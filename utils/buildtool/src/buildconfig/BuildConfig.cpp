/**
 Copyright (c) 2025 Stappler Team <admin@stappler.org>

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 **/

#include "BuildConfig.h"

namespace stappler::buildtool {

makefile::String getExpression(makefile::Makefile *make, StringView str) {
	using namespace makefile;
	String ret;

	make->eval([&](StringView s) { ret.append(s.data(), s.size()); }, "<eval>",
			toString("$(print ", str, ")"));

	return ret;
}

makefile::String getVariable(makefile::Makefile *make, StringView str) {
	using namespace makefile;
	String ret;

	make->eval([&](StringView s) { ret.append(s.data(), s.size()); }, "<eval>",
			toString("$(print $(", str, "))"));

	StringView tmp(ret);
	tmp.trimChars<StringView::WhiteSpace>();
	return tmp.str<Interface>();
}

static void makeConfig(makefile::Makefile *make, const CallbackStream &cb, StringView confName,
		StringView flags, StringView numbers, StringView strings) {
	cb << "// Autogenerated config\n\n";
	cb << "#ifndef STAPPLER_CONFIG_" << confName << "_H_\n";
	cb << "#define STAPPLER_CONFIG_" << confName << "_H_\n";
	cb << '\n';

	StringView(flags).split<StringView::WhiteSpace>(
			[&](StringView str) { cb << "#define " << str << " 1\n"; });

	cb << '\n';

	cb << "#ifdef __cplusplus\n";
	cb << "namespace stappler::" << confName << " {\n";

	StringView(numbers).split<StringView::WhiteSpace>([&](StringView str) {
		auto name = str.readUntil<StringView::Chars<'='>>();
		if (str.is('=')) {
			++str;
			auto num = str.readInteger();
			if (num) {
				cb << "constexpr int " << name << " = " << num.get() << ";\n";
			}
		}
	});

	StringView(strings).split<StringView::WhiteSpace>([&](StringView str) {
		auto name = str.readUntil<StringView::Chars<'='>>();
		if (str.is('=')) {
			++str;
			auto expr = getExpression(make, str);
			if (!expr.empty()) {
				cb << "constexpr auto " << name << " = \"" << expr << "\";\n";
			}
		}
	});

	cb << "} // namespace stappler::" << confName << "\n";
	cb << "#endif // __cplusplus\n";
	cb << "#endif // STAPPLER_CONFIG_" << confName << "_H_\n";
}

void makeBuildConfigHeader(makefile::Makefile *make, const CallbackStream &cb) {
	auto flags = getVariable(make, "BUILD_CONFIG_FLAGS");
	auto values = getVariable(make, "BUILD_CONFIG_VALUES");
	auto strings = getVariable(make, "BUILD_CONFIG_STRINGS");

	makeConfig(make, cb, "buildconfig", flags, values, strings);
}

void makeAppConfigHeader(makefile::Makefile *make, const CallbackStream &cb) {
	auto flags = getVariable(make, "BUILD_APP_CONFIG_FLAGS");
	auto values = getVariable(make, "BUILD_APP_CONFIG_VALUES");
	auto strings = getVariable(make, "BUILD_APP_CONFIG_STRINGS");

	makeConfig(make, cb, "appconfig", flags, values, strings);
}

static void makeAppConfigSourceData(makefile::Makefile *make, const CallbackStream &cb) {
	auto values = getVariable(make, "BUILD_APP_CONFIG_VALUES");
	auto strings = getVariable(make, "BUILD_APP_CONFIG_STRINGS");

	cb << "namespace stappler::appconfig {\n";
	cb << "static SharedSymbol s_appconfigSharedSymbols[] = {\n";

	StringView(values).split<StringView::WhiteSpace>([&](StringView str) {
		auto name = str.readUntil<StringView::Chars<'='>>();
		if (str.is('=')) {
			++str;
			auto num = str.readInteger();
			if (num) {
				cb << "\tSharedSymbol(\"" << name << "\", &" << name << "),\n";
			}
		}
	});

	StringView(strings).split<StringView::WhiteSpace>([&](StringView str) {
		auto name = str.readUntil<StringView::Chars<'='>>();
		if (str.is('=')) {
			++str;
			auto expr = getExpression(make, str);
			if (!expr.empty()) {
				cb << "\tSharedSymbol(\"" << name << "\", " << name << "),\n";
			}
		}
	});
	cb << "};\n";
	cb << "\n";
	cb << "static SharedModule s_appConfigSharedModule(\"appconfig\", s_appconfigSharedSymbols, "
	"sizeof(s_appconfigSharedSymbols) / sizeof(SharedSymbol));\n";
	cb << "} // namespace stappler::appconfig\n";
}

void makeAppConfigSource(makefile::Makefile *make, const CallbackStream &cb) {
	cb << "// Autogenerated appconfig source\n";
	cb << "\n";
	cb << "#include \"stappler-appconfig.h\"\n";
	cb << "#include \"SPSharedModule.h\"\n";
	cb << "\n";

	makeAppConfigSourceData(make, cb);
}

void makeMergedAppConfigSource(makefile::Makefile *release, makefile::Makefile *debug, const CallbackStream &cb) {

	cb << "// Autogenerated appconfig source\n";
	cb << "\n";
	cb << "#include \"stappler-appconfig.h\"\n";
	cb << "#include \"SPSharedModule.h\"\n";
	cb << "\n";
	cb << "#ifdef NDEBUG\n";
	makeAppConfigSourceData(release, cb);
	cb << "#else\n";
	makeAppConfigSourceData(debug, cb);
	cb << "#endif\n";
}

} // namespace stappler::buildtool
